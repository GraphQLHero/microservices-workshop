/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/authentication": {
    /** Authenticate a user from it's credentials */
    post: {
      /** @description User credentials */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthInput"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["AuthPayload"];
          };
        };
        /** @description Invalid credentials provided */
        400: never;
      };
    };
  };
  "/verify": {
    /** Verify and decode a token */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["VerifyInput"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["AuthPayload"];
          };
        };
        /** @description Invalid token provided */
        401: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthInput: {
      /** @example toto@gmail.com */
      username: string;
      /** @example vivegraphql */
      password: string;
    };
    AuthPayload: {
      /** Format: jwt */
      token?: string;
    };
    AuthenticatedUserJwt: {
      /**
       * Format: uuid 
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /** @example toto */
      name: string;
      /**
       * Format: email 
       * @example toto@gmail.com
       */
      email: string;
      /** @example false */
      admin: boolean;
    };
    VerifyInput: {
      /**
       * Format: jwt 
       * @example xxxxx
       */
      token: string;
    };
    VerifyPayload: {
      decoded?: components["schemas"]["AuthenticatedUserJwt"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
